#!/usr/bin/env python3

import sys
from os.path import dirname, abspath
from os.path import join as join_path
from utils import config
from commit_message import ReadCoauthorMessageWrapper, IssueNumberCommitMessage, CommitMessage
from git import Repo

# typedef
CommitSummaryMessage = CommitMessage
CommitCommentsMessage = CommitMessage


class PrepareCommitMessage(object):
    def __init__(self, githooks_dir, file_msg):
        self.repo = Repo(PrepareCommitMessage.hook_git_path(githooks_dir))
        self.file_msg = file_msg
        self.message_list = []

    @staticmethod
    def hook_git_path(hookdir_path):
        # assumes a single .git in path
        split_path_git = hookdir_path.split('.git')
        base_path = split_path_git[0]
        # check if hook is in a submodule
        if split_path_git[1]:
            submodule_name = split_path_git[1].split('/')
            base_path = join_path(base_path, submodule_name[-2])
        return base_path

    def fill_messages(self, config):
        """
            prepares the message in the format:

            commit summary

            <optional body>
            Issue: xxxxx
            <issue_url>/xxxxx


            Co-authored-by: A B <A.B@company.domain>

            # comments
        """
        # coauthors are read first, any other input is an add-on which is read later
        coauthors = ReadCoauthorMessageWrapper(config['coauthors'])
        # first line of variable msg is already filled if git commit -m "<msg>" is executed
        self.message_list.append(CommitSummaryMessage(self.file_msg[0]))
        # start of custom message types, ordered according to the above commit msg format (see function's documentation)
        self.message_list.extend([
            IssueNumberCommitMessage(self.repo, config['issue']),
            coauthors
        ])
        # end of custom message types
        self.message_list.append(CommitCommentsMessage(''.join(self.file_msg[1:])))


def prepare_message(commit_msg_filepath, config):
    with open(commit_msg_filepath, 'r') as f:
        msg = f.readlines()
    githooks_dir = dirname(abspath(__file__))
    commit_msg = PrepareCommitMessage(githooks_dir, msg)
    commit_msg.fill_messages(config)
    write_commit_message(commit_msg_filepath, commit_msg.message_list)


def write_commit_message(commit_msg_filepath, message_list):
    messages = [msg_type.message for msg_type in message_list if hasattr(msg_type, 'message')]
    complete_msg = '\n'.join(messages)
    with open(commit_msg_filepath, 'w') as f:
        f.write(complete_msg)


if __name__ == '__main__':
    commit_msg_filepath = sys.argv[1]
    commit_type = sys.argv[2] if len(sys.argv) > 2 else ''

    # execute only for message commit type. For amend, merge, squash simply exit
    if commit_type not in ['', 'message']:
        sys.exit(0)

    prepare_message(commit_msg_filepath, config)
