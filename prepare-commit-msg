#!/usr/bin/python3

import sys
from os.path import dirname, abspath, exists
from os.path import join as join_path
from time import sleep

try:
    from git import Repo
except ImportError:
    print('[FAILURE]: gitpython not installed. pip install gitpython')
    exit(1)

domain = 'superhero.universe'
issue_url_base = 'https://superhero-jira.net/'
use_issue_in_msg = True


class CommitMsg(object):
    def __init__(self, coauthors):
        githooks_dir = dirname(abspath(__file__))
        self.repo = Repo(CommitMsg.hook_git_path(githooks_dir))
        self._authors_file = join_path(dirname(githooks_dir), 'authors.txt')
        self._coauthors = [x.strip().upper() for x in coauthors.split(',')]
        self.no_coauthors = (self._coauthors[0] == '')
        self._issue_number = self.parse_issue_number_from_branch() if use_issue_in_msg else ""

    @staticmethod
    def hook_git_path(hookdir_path):
        # assumes a single .git in path
        split_path_git = hookdir_path.split('.git')
        base_path = split_path_git[0]
        # check if hook is in a submodule
        if split_path_git[1]:
            submodule_name = split_path_git[1].split('/')
            base_path = join_path(base_path, submodule_name[-2])
        return base_path

    def parse_issue_number_from_branch(self):
        if self.repo.head.is_detached:  return ''
        issue_number = CommitMsg.is_issue_number_in_branch(self.repo.active_branch.name)
        # if isse number is part of the branch name
        if issue_number is None:
            issue_number = str(input('[INPUT]: Enter issue number (optional): '))

        return issue_number

    @staticmethod
    def is_issue_number_in_branch(active_branch):
        # check if branch ends with "_issuexxxxx" where xxxxx is the issue number
        issue_number = active_branch.lower().split('_')[-1]
        return issue_number[2:] if 'issue' in issue_number else None

    @property
    def issue_number(self):
        if self._issue_number:
            issue_url = issue_url_base + self._issue_number
            self._issue_number = '\nItem: {}\n{}\n'.format(self._issue_number, issue_url)

        return self._issue_number

    def read_authors_file(self):
        try:
            if not exists(self._authors_file):  raise IOError
            contents = open(self._authors_file, 'r').readlines()
            authors = [x.split(':') for x in contents]
            return dict(authors)
        except IOError:
            print('[ERROR]: authors.txt not found, check README!')
            sys.exit(1)

    def prune_incorrect_coauthor_initials(self, author_initials):
        authorlst = set(author_initials.keys())
        commit_authors = set(self._coauthors)
        correct_coauthors = authorlst.intersection(commit_authors)
        incorrect_coauthors = commit_authors.difference(authorlst)
        if incorrect_coauthors:
            print("[INFO]: These initials are incorrect {}. \n Please check and add them manually\n".format(
                list(incorrect_coauthors)))
            sleep(2)
        return correct_coauthors

    def get_coauthor_name_email(self):
        coauth_info = self.read_authors_file()
        actual_coauthors = self.prune_incorrect_coauthor_initials(coauth_info)
        return [coauth_info[x.strip().upper()].split(',') for x in actual_coauthors]

    @property
    def co_authors(self):
        if self.no_coauthors:
            return '\n'
        else:
            prefix_str = 'Co-authored-by: {}'
            _coauth_fmt = lambda x: '{} <{}@{}>'.format(x[0].strip(), x[1].strip(), domain)

            coauths_lst = self.get_coauthor_name_email()
            coauths_str = [prefix_str.format(_coauth_fmt(x)) for x in coauths_lst]
            # git expects co-authors after two blank lines
            return '\n\n' + '\n'.join(coauths_str) + '\n\n'


def input_coauthor_initials():
    sys.stdin = open('/dev/tty', 'r')
    coauthors = input(
        """\n[INFO]: ADD co-authors (if any) as a comma separated list of 2 letter initials.
        example input - ts, ck (for Tony Stark and Clark Kent )
        Open ../authors.txt to view the current list of authors for this project.
        \n[INPUT]: Enter co-author(s) initials: """)
    return coauthors


def prepare_message(commit_msg_filepath, auths):
    """
    prepares the message in the format:

    commit summary

    <optional body>
    Issue: xxxxx
    <issue_url>/xxxxx


    Co-authored-by: A B <A.B@company.domain>

    # comments
    """
    commit_msg = CommitMsg(auths)

    with open(commit_msg_filepath, 'r+') as f:
        msg = f.readlines()
        f.seek(0, 0)
        # first line of variable msg is already filled if git commit -m "<msg>" is executed
        f.write("{}{}{}{}".format(msg[0], commit_msg.issue_number, commit_msg.co_authors, ''.join(msg[1:])))


if __name__ == '__main__':
    commit_msg_filepath = sys.argv[1]
    commit_type = sys.argv[2] if len(sys.argv) > 2 else ''

    # execute only for message commit type. For amend, merge, squash simply exit
    if commit_type not in ['', 'message']:
        sys.exit(0)

    coauthors = input_coauthor_initials()
    prepare_message(commit_msg_filepath, coauthors)
